# This is a prototype and it has shortcomings
#  - Do not re-install prometheus if it already exists
#  - Needs proper Grafana authentication (proper password not stored as plaintext)

---
- hosts: all

  roles:
    - williamyeh.prometheus
    - ansiblebit.grafana

  vars:
    prometheus_components:
      - prometheus
    grafana_admin_password: "password"
    grafana_dir_conf: /etc/grafana
    grafana_dir_data: /var/lib/grafana
    grafana_dir_home: /var/lib/grafana/home
    grafana_dir_log: /var/log/grafana
    grafana_dir_plugins: /var/lib/grafana/plugins

  tasks:
    - name: "remove Grafana install detritus"
      file:
        path: "{{item}}"
        state: absent
      with_items:
        - grafana_dir_conf
        - grafana_dir_data
        - grafana_dir_home
        - grafana_dir_log
        - grafana_dir_plugins

    # Installing Prometheus data source, taken from https://github.com/grafana/grafana/issues/1789
    - uri:
        url: http://localhost:3000/api/datasources/name/Prometheus
        user: "{{grafana_admin_user}}"
        password: "{{grafana_admin_password}}"
        force_basic_auth: yes
      register: grafana_prometheus
      failed_when: false
      changed_when: false

    - name: Enable Prometheus Datasource
      uri:
        url: http://localhost:3000/api/datasources
        method: POST
        user: "{{grafana_admin_user}}"
        password: "{{grafana_admin_password}}"
        body:
          name: "Prometheus"
          type: "prometheus"
          url: "http://localhost:9090"
          access: "direct"
          isDefault: true
        force_basic_auth: yes
        status_code: 200
        body_format: json
      when: grafana_prometheus.status == 404

    - name: "ensure web server packages are installed"
      apt:
        name: "{{item}}"
        state: latest
        update_cache: yes
      with_items:
        - nginx
        - uwsgi
        - uwsgi-plugin-python

    - name: "ensure default configuration files absent"
      file:
        path: "{{item}}"
        state: absent
      with_items:
        - /etc/nginx/sites-available/default
        - /etc/nginx/sites-enabled/default

    - name: "deploy hello world software"
      copy:
        src: hello_world.py
        dest: /opt/hello_world.py
        owner: root
        group: root
        mode: 0644

    - name: "deploy hello world NGINX configuration"
      copy:
        src: hello_world.nginx.conf
        dest: /etc/nginx/sites-available/hello_world.conf
        owner: root
        group: root
        mode: 0644
      notify:
        - nginx reloaded

    - name: "enable hello world NGINX configuration"
      file:
        src: /etc/nginx/sites-available/hello_world.conf
        dest: /etc/nginx/sites-enabled/hello_world.conf
        state: link
        force: yes

    - name: "deploy hello world UWSGI configuration"
      copy:
        src: hello_world.uwsgi.ini
        dest: /etc/uwsgi/apps-available/hello_world.ini
        owner: root
        group: root
        mode: 0644
      notify:
        - uwsgi reloaded

    - name: "enable hello world UWSGI configuration"
      file:
        src: /etc/uwsgi/apps-available/hello_world.ini
        dest: /etc/uwsgi/apps-enabled/hello_world.ini
        state: link
        force: yes

  handlers:
    - name: "nginx reloaded"
      service:
        name: nginx
        state: reloaded

    - name: "uwsgi reloaded"
      service:
        name: uwsgi
        state: restarted
...
